{"version":3,"sources":["constants/routes.js","components/NavigationBar.jsx","components/PageWrapper.jsx","pages/LandingPage.js","pages/MapContainer.js","firebase-config.js","pages/LoginPage.js","constants/colours.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","history","useHistory","Nav","justify","direction","background","pad","Anchor","color","onClick","push","icon","ROUTES","PageWrapper","children","Box","fill","LandingPage","align","Heading","size","Paragraph","margin","top","textAlign","Button","label","GoogleApiWrapper","apiKey","google","useState","listings","setListings","selected","setSelected","showInfoWindow","setShowInfoWindow","getListings","a","fetch","then","res","json","error","console","log","useEffect","zoom","style","mapStyles","initialCenter","lat","lng","map","item","key","id","title","address","position","location","visible","clickable","onClose","width","height","config","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","LoginPage","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","firebaseAuth","colours","peach","plum","salmon","orange","gold","theme","global","font","family","colors","brand","COLOURS","accent1","accent2","accent3","accent4","App","Grommet","full","path","exact","component","MapContainer","to","Boolean","window","hostname","match","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f07752d5.chunk.js","sourcesContent":["export default {\n    LISTINGS: '/listings',\n    ACCOUNT: '/account',\n    CREATE_LISTING: '/listings/create',\n};","import React from 'react';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport { useHistory } from \"react-router-dom\";\nimport ROUTES from '../constants/routes';\nimport { Nav, Anchor } from 'grommet';\n\nconst NavigationBar = () => {\n    let history = useHistory();\n    return (\n        <>\n            <Nav justify=\"between\" direction=\"row\" background=\"accent4\" pad=\"small\">\n                <Anchor color=\"accent2\" onClick={() => { history.push('/') }} icon={<HomeIcon />} />\n                <Anchor color=\"accent2\" onClick={() => { history.push(ROUTES.ACCOUNT) }} icon={<AccountCircleIcon />} />\n            </Nav>\n        </>\n    )\n}\n\nexport default NavigationBar;","import React from 'react';\nimport { Box } from 'grommet';\nimport NavigationBar from \"./NavigationBar\"\n\nconst PageWrapper = ({children}) => {\n    return (\n        <>\n            <NavigationBar/>\n            <Box fill background='brand'>\n                {children}\n            </Box>\n        </>\n    )\n}\n\nexport default PageWrapper;","import React from 'react';\nimport { Box, Button, Heading, Paragraph } from 'grommet';\nimport { useHistory } from \"react-router-dom\";\nimport PageWrapper from '../components/PageWrapper';\nimport ROUTES from '../constants/routes';\n\nconst LandingPage = () => {\n    let history = useHistory();\n    return (\n        <PageWrapper>\n            <Box align=\"center\" pad=\"large\">\n                <Heading color='accent2' size='xlarge'>el dorado</Heading>\n                <Paragraph color='accent1' margin={{ top: \"none\" }} textAlign=\"center\" size=\"xxlarge\">\n                    your map to the next great treasure.\n                </Paragraph>\n                <Button color='accent1' label=\"let's go!\" onClick={()=>{history.push(ROUTES.LISTINGS)}}/>\n            </Box>\n            <Box pad=\"large\" direction=\"row\" justify=\"center\">\n                <Paragraph color='accent2' size=\"large\">\n                    selling something?\n                    <Button color='accent2' label=\"manage your listing\" onClick={()=>{history.push(ROUTES.ACCOUNT)}}/>\n                </Paragraph>\n            </Box>\n        </PageWrapper>\n    )\n}\n\nexport default LandingPage;\n","import React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport PageWrapper from '../components/PageWrapper';\n\nconst MapContainer = ({ google }) => {\n  const [listings, setListings] = useState([]);\n  const [selected, setSelected] = useState({});\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n\n  const onMarkerClick = (marker) => {\n    setSelected(marker);\n    setShowInfoWindow(true);\n  };\n\n  const onCloseWindow = () => {\n    setSelected({});\n    setShowInfoWindow(false);\n  };\n\n\n  const getListings = async () => {\n    await fetch('/listings')\n    .then(res => res.json())\n    .then(\n      (listings) => {\n        setListings(listings);\n      },\n      (error) => {\n        console.log(error);\n      })\n    return ;\n  };\n\n\n  useEffect(() => {\n    getListings();\n  },[]);\n  \n  return (\n    <PageWrapper>\n      <Map\n        google={google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: 49.8844,\n          lng: -97.14704,\n        }}\n      >\n      {listings.map(item => {\n        return (\n          <Marker\n            key={item.id}\n            title={item.address}\n            position={item.location}\n            onClick={() => onMarkerClick(item)}\n          />\n        )}\n      )}\n      <InfoWindow\n        position={selected.location}\n        visible={showInfoWindow}\n        clickable={true}\n        onClose={onCloseWindow}\n      >\n        <p>{selected.address}</p>\n      </InfoWindow>\n      \n    </Map>\n    </PageWrapper>\n    \n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDQU2XSRYRooncNw9ZJSkVDNjKH1DzJGRc',\n  // apiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY\n})(MapContainer);\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst config = {\n  apiKey: \"AIzaSyBaBwqlHi_h1IfsYOw_HD8p1EUm5qE9h4Q\",\n  authDomain: \"el-dorado-c1ff1.firebaseapp.com\",\n  projectId: \"el-dorado-c1ff1\",\n  storageBucket: \"el-dorado-c1ff1.appspot.com\",\n  messagingSenderId: \"858900418433\",\n  appId: \"1:858900418433:web:35e7acd704a7129020e280\",\n  measurementId: \"G-3LQ6D4N6VZ\"\n};\n\nexport default config; ","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport config from '../firebase-config';\n\n  firebase.initializeApp(config);\n\n  const LoginPage = () => {\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        signInSuccessUrl: '/signedIn',\n        signInOptions: [\n          firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ]\n      };\n    return (\n        <div>\n          <h1>My App</h1>\n          <p>Please sign-in:</p>\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n  }\n\n  export default LoginPage;","const colours = {\n    peach: '#FFBD71',\n    plum: '#C73866',\n    salmon: '#FE6763',\n    orange: '#FD8F52',\n    gold: '#FFDB58',\n}\n\nexport default colours; ","import React from 'react';\nimport { Grommet } from 'grommet';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport LandingPage from './pages/LandingPage';\nimport MapContainer from './pages/MapContainer';\nimport LoginPage from './pages/LoginPage';\nimport ROUTES from './constants/routes';\nimport COLOURS from './constants/colours';\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n    colors: {\n      brand: COLOURS.peach,\n      accent1: COLOURS.plum,\n      accent2: COLOURS.salmon,\n      accent3: COLOURS.orange,\n      accent4: COLOURS.gold,\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <Grommet theme={theme} full>\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path={ROUTES.LISTINGS} component={MapContainer} />\n        <Route path={ROUTES.ACCOUNT} component={LoginPage} />\n        <Redirect to={{LandingPage}}/>\n      </Switch>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}